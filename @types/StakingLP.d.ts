/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber } from 'bignumber.js'

export interface StakingLPContract extends Truffle.Contract<StakingLPInstance> {
	'new'(
		_factory: string | BigNumber,
		_rewardsToken: string | BigNumber,
		_stakingToken: string | BigNumber,
		meta?: Truffle.TransactionDetails
	): Promise<StakingLPInstance>
}

export interface OwnershipTransferred {
	name: 'OwnershipTransferred'
	args: {
		previousOwner: string
		newOwner: string
	}
}

type AllEvents = OwnershipTransferred

export interface StakingLPInstance extends Truffle.ContractInstance {
	/**
	 * Returns the address of the current owner.
	 */
	owner(txDetails?: Truffle.TransactionDetails): Promise<string>

	/**
	 * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
	 */
	renounceOwnership: {
		(txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
	 */
	transferOwnership: {
		(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	checkUpdateLevel: {
		(amount: number | BigNumber | string, level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(
			amount: number | BigNumber | string,
			level: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<[BigNumber, BigNumber]>
		sendTransaction(
			amount: number | BigNumber | string,
			level: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<string>
		estimateGas(amount: number | BigNumber | string, level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * deposit function
	 */
	deposit: {
		(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	calculateReward: {
		(txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(
			txDetails?: Truffle.TransactionDetails
		): Promise<{
			allowed: boolean
			created: boolean
			level1Tokens: BigNumber
			level2Tokens: BigNumber
			level3Tokens: BigNumber
			level4Tokens: BigNumber
			level1Reward: BigNumber
			level2Reward: BigNumber
			level3Reward: BigNumber
			level4Reward: BigNumber
			tokens: BigNumber
			lastUpdateDate: BigNumber
		}>
		sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	withdraw: {
		(level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(level: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}
}
