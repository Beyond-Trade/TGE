/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber } from 'bignumber.js'

export interface SetContract extends Truffle.Contract<SetInstance> {
	'new'(meta?: Truffle.TransactionDetails): Promise<SetInstance>
}

export interface Deposit {
	name: 'Deposit'
	args: {
		_sender: string
		amount: BigNumber
	}
}

export interface TokenBurn {
	name: 'TokenBurn'
	args: {
		from: string
		value: BigNumber
	}
}

export interface Transfer {
	name: 'Transfer'
	args: {
		from: string
		to: string
		value: BigNumber
	}
}

type AllEvents = Deposit | TokenBurn | Transfer

export interface SetInstance extends Truffle.ContractInstance {
	allowedAddress(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	balanceOf(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	blockedAddress(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	name(txDetails?: Truffle.TransactionDetails): Promise<string>

	owner(txDetails?: Truffle.TransactionDetails): Promise<string>

	symbol(txDetails?: Truffle.TransactionDetails): Promise<string>

	totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	setTransferLock: {
		(_transferLock: boolean, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_transferLock: boolean, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(_transferLock: boolean, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_transferLock: boolean, txDetails?: Truffle.TransactionDetails): Promise<number>
	}
}
