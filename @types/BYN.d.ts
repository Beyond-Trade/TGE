/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber } from 'bignumber.js'

export interface BYNContract extends Truffle.Contract<BYNInstance> {
	'new'(meta?: Truffle.TransactionDetails): Promise<BYNInstance>
}

export interface Deposit {
	name: 'Deposit'
	args: {
		_sender: string
		amount: BigNumber
	}
}

export interface TokenBurn {
	name: 'TokenBurn'
	args: {
		from: string
		value: BigNumber
	}
}

export interface Transfer {
	name: 'Transfer'
	args: {
		from: string
		to: string
		value: BigNumber
	}
}

type AllEvents = Deposit | TokenBurn | Transfer

export interface BYNInstance extends Truffle.ContractInstance {
	add_allowedAddress: {
		(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	add_blockedAddress: {
		(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	admin_tokenBurn: {
		(_value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(_value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	allowedAddress(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	balanceOf(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	blockedAddress(arg0: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	delete_allowedAddress: {
		(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	delete_blockedAddress: {
		(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	get_blockedAddress(_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	get_transferLock(txDetails?: Truffle.TransactionDetails): Promise<boolean>

	lockAmount(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	name(txDetails?: Truffle.TransactionDetails): Promise<string>

	owner(txDetails?: Truffle.TransactionDetails): Promise<string>

	setTransferLock: {
		(_transferLock: boolean, _lockAmount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(_transferLock: boolean, _lockAmount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(_transferLock: boolean, _lockAmount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_transferLock: boolean, _lockAmount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	symbol(txDetails?: Truffle.TransactionDetails): Promise<string>

	totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	withdraw: {
		(txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	transfer: {
		(_to: string | BigNumber, _value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(_to: string | BigNumber, _value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_to: string | BigNumber, _value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_to: string | BigNumber, _value: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}
}
